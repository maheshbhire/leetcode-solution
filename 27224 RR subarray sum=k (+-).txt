int longestSubarrayWithSumK(vector<int> a, long long k) {
    // Write your code here

    long long sum=0;
    int left=0;
    int right=0;
    int maxl=0;
    int n=a.size();


    while(right<n){
        
        while((sum>k) && (left<=right)){
            sum-=a[left];
            left++;
        }
        if(sum==k){
            maxl=max(maxl,right-left+1);
        }
        right++;
        if (right < n) {
            sum += a[right];
        }
    }
          return maxl;
}
another////////************************

#include <bits/stdc++.h> 
int getLongestSubarray(vector<int>& nums, int k){
    // Write your code here
map<long long,int>mp;
    long long sum=0;
    int maxlen=0;

    for(int i=0;i<nums.size();i++){
        sum+=nums[i];

        if(sum==k){
            maxlen=max(maxlen,i+1);
        }

        int rem=sum-k;
        if(mp.find(rem)!=mp.end()){
            int len=i-mp[rem];
            maxlen=max(maxlen,len);
        }
        if (mp.find(sum)== mp.end()) {
            mp[sum] = i;
        }
    }
    return maxlen;
}








